#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
tkl-debops-tests-init: Initialize tkl-debops tests using debops-init.
                       Will return error if tkl-debops project directory
                       is not present or debops is not installed.
"""
# Copyright (C) 2016-2017  Jonathan Struebel <jonathan.struebel@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import subprocess
import os
import sys

DEBOPS_INIT = "debops-init"
DEBOPS_CFG = ".debops.cfg"
HOSTS_FILE = "ansible/inventory/hosts"
DEBOPS_LINKS = ( 'app.yml', 'bootstrap.yml', 'common.yml', 'env.yml',
                 'hw.yml', 'net.yml', 'srv.yml', 'sys.yml', 'virt.yml',
                 'app', 'env', 'hw', 'net', 'service', 'srv', 'sys',
                 'virt',
               )
TKL_DEBOPS_CFG = "tkl-debops.cfg"
TKL_DEBOPS_LINKS = ( 
                     { 'src': 'ansible', 'dst': 'ansible' },
                     { 'src': 'ansible/playbooks/site.yml', 'dst': 'playbooks/site.yml' },
                     { 'src': 'ansible/playbooks/tkl.yml', 'dst': 'playbooks/tkl.yml' },
                   )
TKL_DEBOPS_PATH = "tkl-debops"

def is_tool(name):
    try:
        devnull = open(os.devnull, "w")
        subprocess.Popen([name], stdout=devnull, stderr=devnull).communicate()
    except OSError as e:
        if e.errno == os.errno.ENOENT:
            return False
    return True

def find_playbookpath(config, project_root, playbook):
    if project_root:
        places = [os.path.join(project_root, "debops-playbooks", "playbooks")]
    else:
        places = []

    places.extend(config['paths']['playbooks-paths'])
    for playbook_path in places:
        if os.path.exists(os.path.join(playbook_path, playbook)):
            return playbook_path

def symlink(source, link_name):
    import os
    os_symlink = getattr(os, "symlink", None)
    if callable(os_symlink):
        os_symlink(source, link_name)
    else:
        import ctypes
        csl = ctypes.windll.kernel32.CreateSymbolicLinkW
        csl.argtypes = (ctypes.c_wchar_p, ctypes.c_wchar_p, ctypes.c_uint32)
        csl.restype = ctypes.c_ubyte
        flags = 1 if os.path.isdir(source) else 0
        if csl(link_name, source, flags) == 0:
            raise ctypes.WinError()

def create_test_links(tkl_debops_path):
    for link in TKL_DEBOPS_LINKS:
        if os.path.islink(link['dst']):
            os.remove(link['dst'])
        elif os.path.exists(link['dst']):
            continue

        if os.path.dirname(link['dst']):
            path_prefix = os.path.join('..', tkl_debops_path)
        else:
            path_prefix = tkl_debops_path

        symlink(os.path.join(path_prefix, link['src']), link['dst'])

def create_playbook_links(playbooks_path):
    for link in DEBOPS_LINKS:
        link_dst = os.path.join("playbooks", link)
        if os.path.islink(link_dst):
            os.remove(link_dst)
        elif os.path.exists(link_dst):
            continue

        symlink(os.path.join(playbooks_path, link), link_dst)

def read_local_config(config_path):
    import ConfigParser
    parser = ConfigParser.SafeConfigParser()
    parser.read(config_path)
    return parser

def merge_configs(project_root, tkl_debops_path):
    config_file = os.path.join(project_root, DEBOPS_CFG)
    config = read_local_config(config_file)
    defaults = read_local_config(os.path.join(tkl_debops_path, TKL_DEBOPS_CFG))

    for sect in defaults.sections():
        if not config.has_section(sect):
            config.add_section(sect)

        for opt in defaults.options(sect):
            config.set(sect, opt, defaults.get(sect, opt))

    with open(config_file, 'w') as cfgfile:
        config.write(cfgfile)

def main():
    if not is_tool(DEBOPS_INIT):
        print("debops tools are missing. Please install with 'sudo pip install debops'")
        return 1;

    if not os.path.isfile(os.path.join(TKL_DEBOPS_PATH, TKL_DEBOPS_CFG)):
        print("tkl_debops project is not cloned. Please clone into " + TKL_DEBOPS_PATH)
        return 1;

    import debops

    project_root = debops.find_debops_project()
    config = debops.read_config(project_root)

    playbooks_path = find_playbookpath(config, project_root, "common.yml")

    if playbooks_path is None:
        print("debops-playbooks are missing, run 'debops-update'")
        return 1;

    print("Creating symlinks for tkl-debops resources ...")
    create_test_links(TKL_DEBOPS_PATH)

    print("Creating symlinks for DebOps playbooks ...")
    create_playbook_links(playbooks_path)

    if os.path.isfile(HOSTS_FILE) or os.path.isfile(DEBOPS_CFG):
        print("debops project is already initialized")
        return 0;

    subprocess.call([DEBOPS_INIT, "."])

    print("Customizing debops hosts inventory file ...")
    with open(HOSTS_FILE, 'r') as file:
        filedata = file.read()

    filedata = filedata.replace('[debops_all_hosts]', '[tkl_core]')

    with open(HOSTS_FILE, 'w') as file:
        file.write(filedata)

    print("Customizing debops config file ...")
    project_root = debops.find_debops_project()
    merge_configs(project_root, TKL_DEBOPS_PATH)

    return 0;

if __name__ == '__main__':
    sys.exit(main())
